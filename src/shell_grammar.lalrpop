use crate::ast;
use std::os::unix::io::RawFd;
use crate::lexer;

grammar<'input>(text: &'input str);

extern {
    type Error = lexer::Error;

    enum lexer::Token<'input> {
        " "                 => Token::Space,
        "\t"                => Token::Tab,
        "\n"                => Token::Newline,
        ";"                 => Token::Semicolon,
        ";;"                => Token::DoubleSemicolon,
        "&&"                => Token::And,
        "||"                => Token::Or,
        "|"                 => Token::Pipe,
        "&"                 => Token::Ampersand,
        "("                 => Token::LeftParen,
        ")"                 => Token::RightParen,
        "{"                 => Token::LeftBrace,
        "}"                 => Token::RightBrace,
        "<"                 => Token::LessThan,
        ">"                 => Token::GreaterThan,
        "<<"                => Token::DoubleLessThan,
        ">>"                => Token::DoubleGreaterThan,
        "<&"                => Token::LessThanAnd,
        ">&"                => Token::GreaterThanAnd,
        "!"                 => Token::Bang,
        "$"                 => Token::Dollar,
        "="                 => Token::Equals,
        "\\"                => Token::Backslash,
        "for"               => Token::For,
        "in"                => Token::In,
        "do"                => Token::Do,
        "done"              => Token::Done,
        "case"              => Token::Case,
        "esac"              => Token::Esac,
        "if"                => Token::If,
        "then"              => Token::Then,
        "else"              => Token::Else,
        "elif"              => Token::Elif,
        "fi"                => Token::Fi,
        "while"             => Token::While,
        "until"             => Token::Until,
        "IO_NUMBER"         => Token::IoNumber(<RawFd>),
        "WORD"              => Token::Word(<&'input str>),
        "'"                 => Token::SingleQuote,
        "\""                => Token::DoubleQuote,
        "`"                 => Token::Backtick,
    }
}


pub CompleteCommand: ast::CompleteCommand = {
    <list:List> => ast::CompleteCommand { list },
}

pub List: ast::List = {
    <list:List> <op:SeparatorOp> <and_or:AndOr> => list.push(and_or),
    <and_or:AndOr> => ast::List(vec![and_or]),
}

pub AndOr: ast::AndOr = {
    <pipeline:Pipeline> => ast::AndOr{and_or: None, conditional_exec: None, pipeline},
    <and_or:AndOr> <op:"&&"> <lb:Linebreak> <pipeline:Pipeline> => ast::AndOr{and_or: Some(Box::new(and_or)), conditional_exec: Some(ast::ConditionalExec::And), pipeline},
    <and_or:AndOr> <op:"||"> <lb:Linebreak> <pipeline:Pipeline> => ast::AndOr{and_or: Some(Box::new(and_or)), conditional_exec: Some(ast::ConditionalExec::Or), pipeline},
}

pub Pipeline: ast::Pipeline = {
    <ps:PipeSequence> => ast::Pipeline{bang: false, pipe_sequence: ps},
    <b:"!"> <ps:PipeSequence> => ast::Pipeline{bang: true, pipe_sequence: ps},
}

pub PipeSequence: ast::PipeSequence = {
    <cmd:Command> => ast::PipeSequence(vec![cmd]),
    <ps:PipeSequence> <pipe: "|"> <cmd:Command> => ps.push(cmd),
}

pub Command: ast::Command = {
    <cmd:SimpleCommand> => ast::Command::SimpleCommand(cmd),
    <cmd:CompoundCommand> => ast::Command::CompoundCommand(cmd, None), 
    <cmd:CompoundCommand> <redir:RedirectList> => ast::Command::CompoundCommand(cmd, Some(redir)),
    <func:FunctionDefinition> => ast::Command::FunctionDefinition(func),
}

pub CompoundCommand: ast::CompoundCommand = {
    <bg:BraceGroup> => ast::CompoundCommand::BraceGroup(bg),
    <sub:Subshell> => ast::CompoundCommand::SubShell(sub),
    <For:ForClause> => ast::CompoundCommand::ForClause(For),
    <case:CaseClause> => ast::CompoundCommand::CaseClause(case),
    <If:IfClause> => ast::CompoundCommand::IfClause(If),
    <While:WhileClause> => ast::CompoundCommand::WhileClause(While),
    <until:UntilClause> => ast::CompoundCommand::UntilClause(until),
}

pub Subshell: ast::Subshell = {
    <lp:"("> <list:CompoundList> <rp:")"> => ast::Subshell(list),
}

pub CompoundList: ast::CompoundList = {
    <term:Term> => ast::CompoundList(term),
    <nll:NewlineList> <term:Term> => ast::CompoundList(term),
    <term:Term> <sep:Separator> => ast::CompoundList(term),
    <nll:NewlineList> <term:Term> <sep:Separator> => ast::CompoundList(term),
} 

pub Term: ast::Term = {
    <term:Term> <sep:Separator> <and_or:AndOr> => term.push(and_or),
    <and_or:AndOr> => ast::Term(vec![and_or]),
}

pub ForClause: ast::ForClause = {
    <For:"for"> <name:Name> <lb:Linebreak> <dg:DoGroup> => ast::ForClause{ast::ForType::ForClauseReg(ast::ForClauseReg{name}), do_group: dg},
    <For:"for"> <name:Name> <lb:Linebreak> <In:"in"> <seq_sep:SequentialSeparator> <dg:DoGroup> => ast::ForClause{ast::ForType::ForClauseReg(ast::ForClauseReg{name}), do_group: dg},
    <For:"for"> <name:Name> <lb:Linebreak> <In:"in"> <wdl:WordList> <seq_sep:SequentialSeparator> <dg:DoGroup> => ast::ForClause{ast::ForType::ForClauseList(ast::ForClauseList{name, word_list: wdl}), do_group: dg},
}

pub WordList: ast::WordList = {
    <wdl:WordList> <word:Word> => wdl.push(word),
    <word:Word> => ast::WordList(vec![word]),
}

pub CaseClause: ast::CaseClause = {
    <case:"case"> <word:Word> <In:"in"> <lb:Linebreak> <cl:CaseList> <esac:"esac"> => ast::CaseClause{word, case_list: Some(cl)},
    <case:"case"> <word:Word> <In:"in"> <lb:Linebreak> <cl:CaseListNS> <esac:"esac"> => ast::CaseClause{word, case_list: Some(cl)},
    <case:"case"> <word:Word> <In:"in"> <lb:Linebreak> <esac:"esac"> => ast::CaseClause{word, case_list: None},
}

pub CaseList: ast::CaseList = {
    <cl:CaseList> <ci:CaseItem> => cl.push(ci),
    <ci:CaseItem> => ast::CaseList(vec![ci]),
}

pub CaseListNS: ast::CaseList = {
    <cl:CaseListNS> <ci:CaseItemNS> => cl.push(ci),
    <ci:CaseItemNS> => ast::CaseListNS(vec![ci]),
}

pub CaseItemNS: ast::CaseItem = {
    <pat:Pattern> ")" <lb:Linebreak> => ast::CaseItem{pattern: pat, compound_list: None},
    <pat:Pattern> ")" <lb:Linebreak> <cl:CompoundList> <lb2:Linebreak> => ast::CaseItem{pattern: pat, compound_list: Some(cl)},
    "(" <pat:Pattern> ")" <lb:Linebreak> => ast::CaseItem{pattern: pat, compound_list: None},
    "(" <pat:Pattern> ")" <lb:Linebreak> <cl:CompoundList> <lb2:Linebreak> => ast::CaseItem{pattern: pat, compound_list: Some(cl)},
}

pub CaseItem: ast::CaseItem = {
    <pat:Pattern> ")" <lb:Linebreak> <ds:";;"> <lb2:Linebreak> => ast::CaseItem{pattern: pat, compound_list: None},
    <pat:Pattern> ")" <lb:Linebreak> <cl:CompoundList> <ds:";;"> <lb2:Linebreak> => ast::CaseItem{pattern: pat, compound_list: Some(cl)},
    "(" <pat:Pattern> ")" <lb:Linebreak> <ds:";;"> <lb2:Linebreak> => ast::CaseItem{pattern: pat, compound_list: None},
    "(" <pat:Pattern> ")" <lb:Linebreak> <cl:CompoundList> <ds:";;"> <lb2:Linebreak> => ast::CaseItem{pattern: pat, compound_list: Some(cl)},
}

pub Pattern: ast::Pattern = {
    <word:"WORD"> => ast::Pattern(vec![word]), 
    <pat:Pattern> <pipe:"|"> <word:"WORD"> => pat.push(word),
}

pub IfClause: ast::IfClause = {
    <If:"if"> <cl:CompoundList> <then:"then"> <cl2:CompoundList> <ep:ElsePart> <fi:"fi"> => ast::IfClause{condition: cl, then: cl2, else_part: ep},
    <If:"if"> <cl:CompoundList> <then:"then"> <cl2:CompoundList> <fi:"fi"> => ast::IfClause{condition: cl, then: cl2, else_part: vec![]},
}

pub ElsePart: Vec<ast::ElsePart> = {
    <elif:"elif"> <cl:CompoundList> <then:"then"> <cl2:CompoundList> => vec![ast::ElsePart{condition: Some(cl), then: cl2}],
    <elif:"elif"> <cl:CompoundList> <then:"then"> <cl2:CompoundList> <ep:ElsePart> => ep.insert(ast::ElsePart{condition: Some(cl), then: cl2}, 0),
    <Else:"else"> <cl:CompoundList> => vec![ast::ElsePart{condition: None, then: cl}],
}

pub WhileClause: ast::WhileClause = {
    <While:"while"> <cl:CompoundList> <dg:DoGroup> => ast::WhileClause{condition: cl, do_group: dg},
}

pub UntilClause: ast::UntilClause = {
    <until:"until"> <cl:CompoundList> <dg:DoGroup> => ast::UntilClause{condition: cl, do_group: dg},
}

pub FunctionDefinition: ast::FunctionDefinition = {
    <name:Name> <p1:"("> <p2:")"> <lb:Linebreak> <fb:FunctionBody> => ast::FunctionDefinition{name, body: fb},
}

pub FunctionBody: ast::FunctionBody = {
    <cc:CompoundCommand> => ast::FunctionBody{compound_command: cc, compound_list: None},
    <cc:CompoundCommand> <redirects:RedirectList> => ast::FunctionBody{compound_command: cc, compound_list: Some(redirects)},
}

pub BraceGroup: ast::BraceGroup = {
    <lb:"{"> <cl:CompoundList> <rb:"}"> => ast::BraceGroup(cl),
}

pub DoGroup: ast::DoGroup = {
    <do:"do"> <cl:CompoundList> <done:"done"> => ast::DoGroup(cl),
}

pub SimpleCommand: ast::SimpleCommand = {
    <cmdpf:CmdPrefix> <cmd:Word> <cmdsf:CmdSuffix> => ast::SimpleCommand{prefix: Some(cmdpf), command: cmd, suffix: Some(cmdsf)},
    <cmdpf:CmdPrefix> <cmd:Word> => ast::SimpleCommand{prefix: Some(cmdpf), command: cmd, suffix: None},
    <cmd:Word> <cmdsf:CmdSuffix> => ast::SimpleCommand{prefix: None, command: cmd, suffix: Some(cmdsf)},
    <cmd:Word> => ast::SimpleCommand{prefix: None, command: cmd, suffix: None},
    <cmdpf:CmdPrefix> => ast::SimpleCommand{prefix: Some(cmdpf), command: "".to_string(), suffix: None},
}

pub CmdPrefix: ast::Prefix = {
    <ior:IORedirect> => ast::Prefix{io_redirect: vec![ior], assignment: Vec::new()},
    <cmdpf:CmdPrefix> <ior:IORedirect> => cmdpf.io_redirect.push(ior),
    <word:AssignmentWord> => ast::Prefix{io_redirect: Vec::new(), assignment: vec![word]},
    <cmdpf:CmdPrefix> <word:AssignmentWord> => cmdpf.assignment.push(word),
}

pub CmdSuffix: ast::Suffix = {
    <ior:IORedirect> => ast::Suffix{io_redirect: vec![ior], assignment: Vec::new()},
    <cmdsf:CmdSuffix> <ior:IORedirect> => cmdsf.io_redirect.push(ior),
    <word:AssignmentWord> => ast::Suffix{io_redirect: Vec::new(), assignment: vec![word]},
    <cmdsf:CmdSuffix> <word:AssignmentWord> => cmdsf.assignment.push(word),
}

pub RedirectList: ast::RedirectList = {
    <ior:IORedirect> => ast::RedirectList(vec![ior]),
    <rl:RedirectList> <ior:IORedirect> => rl.push(ior),
} 

pub IORedirect: ast::IoRedirect = {
    <iof:IOFile> => ast::IoRedirect{io_file: Some(iof), io_number: None, io_here: None},
    <ion:Number> <iof:IOFile> => ast::IoRedirect{io_file: Some(iof), io_number: Some(ion), io_here: None},
}

pub IOFile: ast::IoFile = {
    <l:"<"> <word:"WORD"> => ast::IoFile{redirect_type: ast::RedirectType::Input, filename: word},
    <g:">"> <word:"WORD"> => ast::IoFile{redirect_type: ast::RedirectType::Output, filename: word},
    <dg:">>"> <word:"WORD"> => ast::IoFile{redirect_type: ast::RedirectType::Append, filename: word},
}



AssignmentWord: String = {
    <word: "WORD"> "=" <word2: "WORD"> => format!("{}={}", word, word2),
}

Word: String = {
    <word: "WORD"> => word.to_string(),
}

Name: String = {
    <word: "WORD"> => word.to_string(),
}

Number: i32 = {
    <num: "IO_NUMBER"> => num,
}


NewlineList: String = {
    <nl:"\n"> => nl.to_string(),
}


Linebreak: String = {
    <nll:NewlineList> => nll,
}

SeparatorOp: String = {
    <op:";"> => op.to_string(),
    <op:"&"> => op.to_string(),
}

Separator: String = {
    <op:SeparatorOp> <lb:Linebreak> => op + &lb,
    <nll:NewlineList> => nll,
}

SequentialSeparator: String = {
    <sepop:";"> <lb:Linebreak> => sepop + &lb,
    <nll:NewlineList> => nll,
}


