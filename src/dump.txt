   Compiling rsh v0.1.0 (/home/ki11errabbit/Documents/Programing-Projects/Rust/rsh)
error: failed to run custom build command for `rsh v0.1.0 (/home/ki11errabbit/Documents/Programing-Projects/Rust/rsh)`

Caused by:
  process didn't exit successfully: `/home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/target/debug/build/rsh-e0d6cadaa66599d4/build-script-build` (exit status: 1)
  --- stdout
  processing file `/home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop`
  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:103:5: 103:42: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Pattern ")" Linebreak Term
    At that point, if the next token is a `"\n"`, then the parser can proceed in two different ways.

    First, the parser could execute the production at /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:103:5: 103:42, which would consume the top 1 token(s) from the stack and produce a `CompoundList`. This might then yield a parse tree like
      Pattern ")" Linebreak Term           ╷ Linebreak
      │                     └─CompoundList─┘         │
      └─CaseItemNS───────────────────────────────────┘

    Alternatively, the parser could shift the `"\n"` token and later use it to construct a `NewlineList`. This might then yield a parse tree like
      Term "\n"          ╷
      │    ├─NewlineList─┤
      │    └─Separator───┤
      └─CompoundList─────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:103:5: 103:42: Conflict detected

      when in this state:
    CompoundList = Term (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = Term (*) Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Separator = (*) NewlineList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Separator = (*) SeparatorOp Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SeparatorOp = (*) "&" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SeparatorOp = (*) ";" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term (*) Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"&"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:103:5: 103:42: Conflict detected

      when in this state:
    CompoundList = Term (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = Term (*) Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Separator = (*) NewlineList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Separator = (*) SeparatorOp Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SeparatorOp = (*) "&" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SeparatorOp = (*) ";" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term (*) Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `";"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:197:5: 197:128: Conflict detected

      when in this state:
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdSuffix = CmdSuffix (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdSuffix = CmdSuffix (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = CmdPrefix Word CmdSuffix (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"<"` we can reduce to a `SimpleCommand` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:197:5: 197:128: Conflict detected

      when in this state:
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdSuffix = CmdSuffix (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdSuffix = CmdSuffix (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = CmdPrefix Word CmdSuffix (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `">"` we can reduce to a `SimpleCommand` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:197:5: 197:128: Conflict detected

      when in this state:
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdSuffix = CmdSuffix (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdSuffix = CmdSuffix (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = CmdPrefix Word CmdSuffix (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `">>"` we can reduce to a `SimpleCommand` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:197:5: 197:128: Conflict detected

      when in this state:
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdSuffix = CmdSuffix (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdSuffix = CmdSuffix (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = CmdPrefix Word CmdSuffix (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"IO_NUMBER"` we can reduce to a `SimpleCommand` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:197:5: 197:128: Conflict detected

      when in this state:
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdSuffix = CmdSuffix (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdSuffix = CmdSuffix (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = CmdPrefix Word CmdSuffix (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"WORD"` we can reduce to a `SimpleCommand` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:104:5: 104:60: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Pattern ")" Linebreak NewlineList Term
    At that point, if the next token is a `"\n"`, then the parser can proceed in two different ways.

    First, the parser could execute the production at /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:104:5: 104:60, which would consume the top 2 token(s) from the stack and produce a `CompoundList`. This might then yield a parse tree like
      Pattern ")" Linebreak NewlineList Term Linebreak
      │                     └─CompoundList─┘         │
      └─CaseItemNS───────────────────────────────────┘

    Alternatively, the parser could shift the `"\n"` token and later use it to construct a `NewlineList`. This might then yield a parse tree like
      Term "\n"          ╷ AndOr
      │    ├─NewlineList─┤     │
      │    └─Separator───┘     │
      └─Term───────────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:104:5: 104:60: Conflict detected

      when in this state:
    CompoundList = NewlineList Term (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = NewlineList Term (*) Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Separator = (*) NewlineList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Separator = (*) SeparatorOp Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SeparatorOp = (*) "&" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SeparatorOp = (*) ";" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term (*) Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"&"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:104:5: 104:60: Conflict detected

      when in this state:
    CompoundList = NewlineList Term (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = NewlineList Term (*) Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Separator = (*) NewlineList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Separator = (*) SeparatorOp Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SeparatorOp = (*) "&" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SeparatorOp = (*) ";" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term (*) Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `";"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:105:5: 105:58: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"!"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:105:5: 105:58: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"("` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:105:5: 105:58: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"<"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:105:5: 105:58: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `">"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:105:5: 105:58: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `">>"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:105:5: 105:58: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"IO_NUMBER"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:105:5: 105:58: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"WORD"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:105:5: 105:58: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"case"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:105:5: 105:58: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"for"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:105:5: 105:58: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"if"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:105:5: 105:58: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"until"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:105:5: 105:58: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"while"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:105:5: 105:58: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"{"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:106:5: 106:76: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = NewlineList Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"!"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:106:5: 106:76: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = NewlineList Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"("` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:106:5: 106:76: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = NewlineList Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"<"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:106:5: 106:76: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = NewlineList Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `">"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:106:5: 106:76: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = NewlineList Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `">>"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:106:5: 106:76: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = NewlineList Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"IO_NUMBER"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:106:5: 106:76: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = NewlineList Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"WORD"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:106:5: 106:76: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = NewlineList Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"case"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:106:5: 106:76: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = NewlineList Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"for"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:106:5: 106:76: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = NewlineList Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"if"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:106:5: 106:76: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = NewlineList Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"until"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:106:5: 106:76: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = NewlineList Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"while"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:106:5: 106:76: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = NewlineList Term Separator (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"{"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:110:5: 110:67: Conflict detected

      when in this state:
    AndOr = AndOr (*) "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = AndOr (*) "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator AndOr (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"&&"` we can reduce to a `Term` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:110:5: 110:67: Conflict detected

      when in this state:
    AndOr = AndOr (*) "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = AndOr (*) "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term Separator AndOr (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"||"` we can reduce to a `Term` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:184:5: 184:88: Conflict detected

      when in this state:
    FunctionBody = CompoundCommand (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionBody = CompoundCommand (*) RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    RedirectList = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    RedirectList = (*) RedirectList IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"<"` we can reduce to a `FunctionBody` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:184:5: 184:88: Conflict detected

      when in this state:
    FunctionBody = CompoundCommand (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionBody = CompoundCommand (*) RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    RedirectList = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    RedirectList = (*) RedirectList IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `">"` we can reduce to a `FunctionBody` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:184:5: 184:88: Conflict detected

      when in this state:
    FunctionBody = CompoundCommand (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionBody = CompoundCommand (*) RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    RedirectList = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    RedirectList = (*) RedirectList IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `">>"` we can reduce to a `FunctionBody` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:184:5: 184:88: Conflict detected

      when in this state:
    FunctionBody = CompoundCommand (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionBody = CompoundCommand (*) RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    RedirectList = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    RedirectList = (*) RedirectList IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"IO_NUMBER"` we can reduce to a `FunctionBody` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:185:5: 185:124: Conflict detected

      when in this state:
    FunctionBody = CompoundCommand RedirectList (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    RedirectList = RedirectList (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"<"` we can reduce to a `FunctionBody` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:185:5: 185:124: Conflict detected

      when in this state:
    FunctionBody = CompoundCommand RedirectList (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    RedirectList = RedirectList (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `">"` we can reduce to a `FunctionBody` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:185:5: 185:124: Conflict detected

      when in this state:
    FunctionBody = CompoundCommand RedirectList (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    RedirectList = RedirectList (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `">>"` we can reduce to a `FunctionBody` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:185:5: 185:124: Conflict detected

      when in this state:
    FunctionBody = CompoundCommand RedirectList (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    RedirectList = RedirectList (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"IO_NUMBER"` we can reduce to a `FunctionBody` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"\n"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"!"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Pattern ")" Linebreak
    At that point, if the next token is a `"("`, then the parser can proceed in two different ways.

    First, the parser could execute the production at /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88, which would consume the top 3 token(s) from the stack and produce a `CaseItemNS`. This might then yield a parse tree like
      Pattern ")" Linebreak CaseItemNS
      ├─CaseItemNS────────┤          │
      ├─CaseListNS────────┘          │
      └─CaseListNS───────────────────┘

    Alternatively, the parser could shift the `"("` token and later use it to construct a `Subshell`. This might then yield a parse tree like
      Pattern ")" Linebreak "(" CompoundList ")" Linebreak
      │                     ├─Subshell─────────┤         │
      │                     ├─CompoundCommand──┤         │
      │                     ├─Command──────────┤         │
      │                     ├─PipeSequence─────┤         │
      │                     ├─Pipeline─────────┤         │
      │                     ├─AndOr────────────┤         │
      │                     ├─Term─────────────┤         │
      │                     └─CompoundList─────┘         │
      └─CaseItemNS───────────────────────────────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `";;"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"<"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `">"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `">>"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"IO_NUMBER"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Pattern ")" Linebreak
    At that point, if the next token is a `"WORD"`, then the parser can proceed in two different ways.

    First, the parser could execute the production at /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88, which would consume the top 3 token(s) from the stack and produce a `CaseItemNS`. This might then yield a parse tree like
      Pattern ")" Linebreak CaseItemNS
      ├─CaseItemNS────────┤          │
      ├─CaseListNS────────┘          │
      └─CaseListNS───────────────────┘

    Alternatively, the parser could shift the `"WORD"` token and later use it to construct a `Word`. This might then yield a parse tree like
      Pattern ")" Linebreak "WORD"          ╷ Linebreak
      │                     ├─Word──────────┤         │
      │                     ├─SimpleCommand─┤         │
      │                     ├─Command───────┤         │
      │                     ├─PipeSequence──┤         │
      │                     ├─Pipeline──────┤         │
      │                     ├─AndOr─────────┤         │
      │                     ├─Term──────────┤         │
      │                     └─CompoundList──┘         │
      └─CaseItemNS────────────────────────────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"case"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"for"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"if"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"until"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"while"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"{"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"\n"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"!"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      CaseListNS Pattern ")" Linebreak
    At that point, if the next token is a `"("`, then the parser can proceed in two different ways.

    First, the parser could execute the production at /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88, which would consume the top 3 token(s) from the stack and produce a `CaseItemNS`. This might then yield a parse tree like
      CaseListNS Pattern ")" Linebreak CaseItemNS
      │          └─CaseItemNS────────┤          │
      ├─CaseListNS───────────────────┘          │
      └─CaseListNS──────────────────────────────┘

    Alternatively, the parser could shift the `"("` token and later use it to construct a `Subshell`. This might then yield a parse tree like
      Pattern ")" Linebreak "(" CompoundList ")" Linebreak
      │                     ├─Subshell─────────┤         │
      │                     ├─CompoundCommand──┤         │
      │                     ├─Command──────────┤         │
      │                     ├─PipeSequence─────┤         │
      │                     ├─Pipeline─────────┤         │
      │                     ├─AndOr────────────┤         │
      │                     ├─Term─────────────┤         │
      │                     └─CompoundList─────┘         │
      └─CaseItemNS───────────────────────────────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"<"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `">"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `">>"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"IO_NUMBER"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      CaseListNS Pattern ")" Linebreak
    At that point, if the next token is a `"WORD"`, then the parser can proceed in two different ways.

    First, the parser could execute the production at /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88, which would consume the top 3 token(s) from the stack and produce a `CaseItemNS`. This might then yield a parse tree like
      CaseListNS Pattern ")" Linebreak CaseItemNS
      │          └─CaseItemNS────────┤          │
      ├─CaseListNS───────────────────┘          │
      └─CaseListNS──────────────────────────────┘

    Alternatively, the parser could shift the `"WORD"` token and later use it to construct a `Word`. This might then yield a parse tree like
      Pattern ")" Linebreak "WORD"          ╷ Linebreak
      │                     ├─Word──────────┤         │
      │                     ├─SimpleCommand─┤         │
      │                     ├─Command───────┤         │
      │                     ├─PipeSequence──┤         │
      │                     ├─Pipeline──────┤         │
      │                     ├─AndOr─────────┤         │
      │                     ├─Term──────────┤         │
      │                     └─CompoundList──┘         │
      └─CaseItemNS────────────────────────────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"case"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"for"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"if"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"until"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"while"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:142:5: 142:88: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"{"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"\n"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"!"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      "(" Pattern ")" Linebreak
    At that point, if the next token is a `"("`, then the parser can proceed in two different ways.

    First, the parser could execute the production at /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92, which would consume the top 4 token(s) from the stack and produce a `CaseItemNS`. This might then yield a parse tree like
      "(" Pattern ")" Linebreak CaseItemNS
      ├─CaseItemNS────────────┤          │
      ├─CaseListNS────────────┘          │
      └─CaseListNS───────────────────────┘

    Alternatively, the parser could shift the `"("` token and later use it to construct a `Subshell`. This might then yield a parse tree like
      "(" Pattern ")" Linebreak "(" CompoundList ")" Linebreak
      │                         ├─Subshell─────────┤         │
      │                         ├─CompoundCommand──┤         │
      │                         ├─Command──────────┤         │
      │                         ├─PipeSequence─────┤         │
      │                         ├─Pipeline─────────┤         │
      │                         ├─AndOr────────────┤         │
      │                         ├─Term─────────────┤         │
      │                         └─CompoundList─────┘         │
      └─CaseItemNS───────────────────────────────────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `";;"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"<"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `">"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `">>"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"IO_NUMBER"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      "(" Pattern ")" Linebreak
    At that point, if the next token is a `"WORD"`, then the parser can proceed in two different ways.

    First, the parser could execute the production at /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92, which would consume the top 4 token(s) from the stack and produce a `CaseItemNS`. This might then yield a parse tree like
      "(" Pattern ")" Linebreak CaseItemNS
      ├─CaseItemNS────────────┤          │
      ├─CaseListNS────────────┘          │
      └─CaseListNS───────────────────────┘

    Alternatively, the parser could shift the `"WORD"` token and later use it to construct a `Word`. This might then yield a parse tree like
      "(" Pattern ")" Linebreak "WORD"          ╷ Linebreak
      │                         ├─Word──────────┤         │
      │                         ├─SimpleCommand─┤         │
      │                         ├─Command───────┤         │
      │                         ├─PipeSequence──┤         │
      │                         ├─Pipeline──────┤         │
      │                         ├─AndOr─────────┤         │
      │                         ├─Term──────────┤         │
      │                         └─CompoundList──┘         │
      └─CaseItemNS────────────────────────────────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"case"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"for"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"if"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"until"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"while"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) CompoundList ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItem = "(" Pattern ")" Linebreak (*) ";;" Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"{"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:166:5: 166:123: Conflict detected

      when in this state:
    ElsePart = (*) "elif" CompoundList "then" CompoundList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ElsePart = "elif" CompoundList "then" CompoundList (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ElsePart = (*) "elif" CompoundList "then" CompoundList ElsePart ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ElsePart = "elif" CompoundList "then" CompoundList (*) ElsePart ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ElsePart = (*) "else" CompoundList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"elif"` we can reduce to a `ElsePart` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:166:5: 166:123: Conflict detected

      when in this state:
    ElsePart = (*) "elif" CompoundList "then" CompoundList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ElsePart = "elif" CompoundList "then" CompoundList (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ElsePart = (*) "elif" CompoundList "then" CompoundList ElsePart ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ElsePart = "elif" CompoundList "then" CompoundList (*) ElsePart ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ElsePart = (*) "else" CompoundList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"else"` we can reduce to a `ElsePart` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"\n"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"!"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      CaseListNS "(" Pattern ")" Linebreak
    At that point, if the next token is a `"("`, then the parser can proceed in two different ways.

    First, the parser could execute the production at /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92, which would consume the top 4 token(s) from the stack and produce a `CaseItemNS`. This might then yield a parse tree like
      CaseListNS "(" Pattern ")" Linebreak CaseItemNS
      │          └─CaseItemNS────────────┤          │
      ├─CaseListNS───────────────────────┘          │
      └─CaseListNS──────────────────────────────────┘

    Alternatively, the parser could shift the `"("` token and later use it to construct a `Subshell`. This might then yield a parse tree like
      "(" Pattern ")" Linebreak "(" CompoundList ")" Linebreak
      │                         ├─Subshell─────────┤         │
      │                         ├─CompoundCommand──┤         │
      │                         ├─Command──────────┤         │
      │                         ├─PipeSequence─────┤         │
      │                         ├─Pipeline─────────┤         │
      │                         ├─AndOr────────────┤         │
      │                         ├─Term─────────────┤         │
      │                         └─CompoundList─────┘         │
      └─CaseItemNS───────────────────────────────────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"<"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `">"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `">>"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"IO_NUMBER"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      CaseListNS "(" Pattern ")" Linebreak
    At that point, if the next token is a `"WORD"`, then the parser can proceed in two different ways.

    First, the parser could execute the production at /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92, which would consume the top 4 token(s) from the stack and produce a `CaseItemNS`. This might then yield a parse tree like
      CaseListNS "(" Pattern ")" Linebreak CaseItemNS
      │          └─CaseItemNS────────────┤          │
      ├─CaseListNS───────────────────────┘          │
      └─CaseListNS──────────────────────────────────┘

    Alternatively, the parser could shift the `"WORD"` token and later use it to construct a `Word`. This might then yield a parse tree like
      "(" Pattern ")" Linebreak "WORD"          ╷ Linebreak
      │                         ├─Word──────────┤         │
      │                         ├─SimpleCommand─┤         │
      │                         ├─Command───────┤         │
      │                         ├─PipeSequence──┤         │
      │                         ├─Pipeline──────┤         │
      │                         ├─AndOr─────────┤         │
      │                         ├─Term──────────┤         │
      │                         └─CompoundList──┘         │
      └─CaseItemNS────────────────────────────────────────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"case"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"for"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"if"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"until"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"while"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:144:5: 144:92: Conflict detected

      when in this state:
    AndOr = (*) AndOr "&&" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) AndOr "||" Linebreak Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AndOr = (*) Pipeline ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    AssignmentWord = (*) "WORD" "=" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    BraceGroup = (*) "{" CompoundList "}" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseList "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak CaseListNS "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseClause = (*) "case" Word "in" Linebreak "esac" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CaseItemNS = "(" Pattern ")" Linebreak (*) CompoundList Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix AssignmentWord ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) CmdPrefix IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CmdPrefix = (*) IORedirect ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) CompoundCommand RedirectList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) FunctionDefinition ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Command = (*) SimpleCommand ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) BraceGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) CaseClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) ForClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) IfClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) Subshell ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) UntilClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundCommand = (*) WhileClause ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) NewlineList Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = (*) Term Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    ForClause = (*) "for" Name Linebreak "in" WordList SequentialSeparator DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    FunctionDefinition = (*) Name "(" ")" Linebreak FunctionBody ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) "<" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IOFile = (*) ">>" "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IORedirect = (*) Number IOFile ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList ElsePart "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    IfClause = (*) "if" CompoundList "then" CompoundList "fi" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Name = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Number = (*) "IO_NUMBER" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    PipeSequence = (*) PipeSequence "|" Command ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Pipeline = (*) "!" PipeSequence ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) CmdPrefix Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SimpleCommand = (*) Word CmdSuffix ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Subshell = (*) "(" CompoundList ")" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = (*) Term Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    UntilClause = (*) "until" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    WhileClause = (*) "while" CompoundList DoGroup ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Word = (*) "WORD" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"{"` we can reduce to a `CaseItemNS` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:103:5: 103:42: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Pattern ")" Linebreak Term
    At that point, if the next token is a `"\n"`, then the parser can proceed in two different ways.

    First, the parser could execute the production at /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:103:5: 103:42, which would consume the top 1 token(s) from the stack and produce a `CompoundList`. This might then yield a parse tree like
      Pattern ")" Linebreak Term           ╷ Linebreak
      │                     └─CompoundList─┘         │
      └─CaseItemNS───────────────────────────────────┘

    Alternatively, the parser could shift the `"\n"` token and later use it to construct a `NewlineList`. This might then yield a parse tree like
      Term "\n"          ╷
      │    ├─NewlineList─┤
      │    └─Separator───┤
      └─CompoundList─────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:103:5: 103:42: Conflict detected

      when in this state:
    CompoundList = Term (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = Term (*) Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Separator = (*) NewlineList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Separator = (*) SeparatorOp Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SeparatorOp = (*) "&" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SeparatorOp = (*) ";" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term (*) Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `"&"` we can reduce to a `CompoundList` but we can also shift

  /home/ki11errabbit/Documents/Programing-Projects/Rust/rsh/src/shell_grammar.lalrpop:103:5: 103:42: Conflict detected

      when in this state:
    CompoundList = Term (*) ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    CompoundList = Term (*) Separator ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    NewlineList = (*) "\n" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Separator = (*) NewlineList ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Separator = (*) SeparatorOp Linebreak ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SeparatorOp = (*) "&" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    SeparatorOp = (*) ";" ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]
    Term = Term (*) Separator AndOr ["\t", "\n", " ", "!", "\"", "$", "&", "&&", "'", "(", ")", ";", ";;", "<", "<&", "<<", "=", ">", ">&", ">>", "IO_NUMBER", "WORD", "\\", "`", "case", "do", "done", "elif", "else", "esac", "fi", "for", "if", "in", "then", "until", "while", "{", "|", "||", "}", EOF]

    and looking at a token `";"` we can reduce to a `CompoundList` but we can also shift
